// Mocks generated by Mockito 5.4.4 from annotations
// in magic_workout_app/test/integration/workout_integration_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:hydrated_bloc/hydrated_bloc.dart' as _i7;
import 'package:magic_workout_app/cubit/workout_cubit.dart' as _i3;
import 'package:magic_workout_app/cubit/workout_state.dart' as _i2;
import 'package:magic_workout_app/models/workout.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeWorkoutState_0 extends _i1.SmartFake implements _i2.WorkoutState {
  _FakeWorkoutState_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [WorkoutCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockWorkoutCubit extends _i1.Mock implements _i3.WorkoutCubit {
  MockWorkoutCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.WorkoutState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeWorkoutState_0(
          this,
          Invocation.getter(#state),
        ),
      ) as _i2.WorkoutState);

  @override
  _i4.Stream<_i2.WorkoutState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i4.Stream<_i2.WorkoutState>.empty(),
      ) as _i4.Stream<_i2.WorkoutState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  String get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.getter(#id),
        ),
      ) as String);

  @override
  String get storagePrefix => (super.noSuchMethod(
        Invocation.getter(#storagePrefix),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.getter(#storagePrefix),
        ),
      ) as String);

  @override
  String get storageToken => (super.noSuchMethod(
        Invocation.getter(#storageToken),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.getter(#storageToken),
        ),
      ) as String);

  @override
  void addWorkout(_i6.Workout? workout) => super.noSuchMethod(
        Invocation.method(
          #addWorkout,
          [workout],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void updateWorkout(_i6.Workout? workout) => super.noSuchMethod(
        Invocation.method(
          #updateWorkout,
          [workout],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void deleteWorkout(int? index) => super.noSuchMethod(
        Invocation.method(
          #deleteWorkout,
          [index],
        ),
        returnValueForMissingStub: null,
      );

  @override
  Map<String, dynamic>? toJson(_i2.WorkoutState? state) => (super.noSuchMethod(Invocation.method(
        #toJson,
        [state],
      )) as Map<String, dynamic>?);

  @override
  _i2.WorkoutState? fromJson(Map<String, dynamic>? json) => (super.noSuchMethod(Invocation.method(
        #fromJson,
        [json],
      )) as _i2.WorkoutState?);

  @override
  void emit(_i2.WorkoutState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i7.Change<_i2.WorkoutState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void hydrate() => super.noSuchMethod(
        Invocation.method(
          #hydrate,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> clear() => (super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
